/* eslint-disable */
/**
 * This file was automatically generated by typeshare from Rust.
 * Do not edit this file manually.
 * 
 * To regenerate, run: pnpm generate-types
 */

import { VerifiedEmail } from "@gofranz/common";

/*
 Generated by typeshare 1.13.3
*/

/** * Alta challenge data
 * - This is saved to the challenge.data in the DB
 * - This is also submitted from the client to the server */
export interface AltchaChallengeData {
	salt: string;
	number: number;
	challenge: string;
	signature: string;
	algorithm: string;
}

export interface AltchaPublicChallenge {
	salt: string;
	challenge: string;
	signature: string;
	algorithm: string;
}

export interface AverageTimeData {
	average_time_seconds: number;
}

export interface BrowserData {
	browser: string;
	count: number;
}

export enum ChallengeKind {
	ALTCHA = "ALTCHA",
}

export interface Challenge {
	id: string;
	form_id: string;
	kind: ChallengeKind;
	data: string;
	created_at: string;
	expires_at: string;
	completed_at?: string;
}

export interface CityData {
	city: string;
	count: number;
}

export interface CountryData {
	country: string;
	count: number;
}

export interface File {
	id: string;
	form_id: string;
	message_id: string;
	filename: string;
	bucket_name: string;
	path: string;
	size: number;
	created_at: string;
}

export interface FileWithSignedUrl {
	file: File;
	signed_url: string;
	signed_url_expires_at: string;
}

export interface Form {
	id: string;
	title: string;
	user_id: string;
	filter_spam: boolean;
	redirect_url?: string;
	created_at: string;
	updated_at: string;
	check_specs: boolean;
	specs?: string;
	check_challenge: boolean;
	auto_response_enabled: boolean;
	auto_response_subject?: string;
	auto_response_text?: string;
}

export interface FormAnalyticsAggregateResponse {
	top_countries: CountryData[];
	top_cities: CityData[];
	top_browsers: BrowserData[];
	average_time_to_submit_message: AverageTimeData;
}

export interface FormAnalyticsByDay {
	date: string;
	message_count: number;
	view_count: number;
	conversion_rate: number;
}

export interface FormAnalyticsResponse {
	from_date: string;
	to_date: string;
	message_count: number;
	view_count: number;
	conversion_rate: number;
	data: FormAnalyticsByDay[];
}

/** CSS frameworks supported for form styling and response formatting */
export enum CssFramework {
	/** Bulma CSS framework - Modern CSS framework based on Flexbox */
	Bulma = "bulma",
	/** Bootstrap CSS framework - Popular responsive front-end framework */
	Bootstrap = "bootstrap",
	/** Formshive custom CSS framework - Lightweight, form-focused styling */
	Formshive = "formshive",
}

/**
 * Override options for form submission redirect behavior.
 * By default, if a redirect URL is set on the form, submissions will redirect to that URL.
 * These options allow overriding that default behavior on a per-request basis.
 */
export enum FormRedirectOverride {
	/**
	 * Force redirect to a success HTML page instead of the form's configured redirect URL.
	 * Useful for showing a confirmation message instead of redirecting elsewhere.
	 */
	RedirectToSuccessHtml = "html",
	/**
	 * Disable any redirect and return a JSON response instead.
	 * Useful for API clients or AJAX submissions that need structured response data.
	 */
	NoRedirect = "none",
}

/** Query parameters for customizing form submission behavior and HTML rendering */
export interface FormHtmlOptions {
	/**
	 * CSS framework to use for styling the form response. Options: 'bulma', 'bootstrap', or 'formshive'.
	 * When specified, applies framework-specific CSS classes to form elements and error messages.
	 */
	css_framework?: CssFramework;
	/**
	 * Whether to embed CSS styles directly in the HTML response instead of using external links.
	 * Useful for self-contained HTML responses or when external CSS may not be accessible.
	 */
	css_embed?: boolean;
	/**
	 * Indicates if the form is being displayed within an iframe.
	 * May affect how responses are formatted or styled for iframe compatibility.
	 */
	iframe?: boolean;
	/**
	 * Enable analytics tracking for this form submission.
	 * When true, captures additional metrics like submission timing and user behavior data.
	 */
	track?: boolean;
	/**
	 * Override the form's default redirect behavior after successful submission.
	 * Options: 'html' - Show success HTML page, 'none' - Return JSON response without redirect.
	 */
	redirect?: FormRedirectOverride;
}

export interface FormRecipientsQueryParams {
	limit: number;
	offset: number;
}

export interface LocationInfo {
	country_code?: string;
	country_name?: string;
	continent_code?: string;
	continent_name?: string;
	region_code?: string;
	region_name?: string;
	city?: string;
	latitude?: number;
	longitude?: number;
	timezone?: string;
}

export interface FormView {
	id: string;
	form_id: string;
	ip_hash: string;
	user_agent?: string;
	referrer?: string;
	view_type: string;
	device_type?: string;
	browser_name?: string;
	traffic_source?: string;
	analytics_data?: any;
	created_at: string;
	location?: LocationInfo;
}

export interface FormsIntegration {
	form_id: string;
	integration_id: string;
	created_at: string;
}

export interface FormsIntegrationsQueryParams {
	limit: number;
	offset: number;
}

export enum IntegrationType {
	WEBHOOK = "WEBHOOK",
	WEBHOOK_ZAPIER = "WEBHOOK_ZAPIER",
	WEBHOOK_SLACK = "WEBHOOK_SLACK",
	WEBHOOK_GOOGLE_SHEETS = "WEBHOOK_GOOGLE_SHEETS",
	API_PIPEDRIVE = "API_PIPEDRIVE",
	API_MAILCHIMP = "API_MAILCHIMP",
	API_KIT = "API_KIT",
}

export interface Integration {
	id: string;
	user_id: string;
	title: string;
	kind: IntegrationType;
	data: string;
	created_at: string;
	updated_at: string;
	secrets?: string;
}

export interface FormsIntegrationsResponse {
	data: Integration[];
	total: number;
}

export interface FormsQueryParams {
	limit: number;
	offset: number;
}

export interface FormsRecipient {
	form_id: string;
	verified_email_id: string;
	created_at: string;
}

export interface FormsRecipientsResponse {
	data: VerifiedEmail[];
	total: number;
}

export interface FormsResponse {
	data: Form[];
	total: number;
}

export interface HttpNewForm {
	title: string;
	filter_spam?: boolean;
	check_challenge?: boolean;
	redirect_url?: string;
	auto_response_enabled?: boolean;
	auto_response_subject?: string;
	auto_response_text?: string;
}

export interface HttpNewIntegration {
	title: string;
	kind: IntegrationType;
	data: string;
	secrets?: any;
}

export interface HttpUpdateMessage {
	user_marked_spam: boolean;
}

/** Response struct that excludes secrets field */
export interface IntegrationResponse {
	id: string;
	user_id: string;
	title: string;
	kind: IntegrationType;
	data: string;
	created_at: string;
	updated_at: string;
}

/** API response struct for multiple integrations */
export interface IntegrationsApiResponse {
	data: IntegrationResponse[];
	total: number;
}

export interface IntegrationsQueryParams {
	limit: number;
	offset: number;
}

export interface JsonRedirect {
	redirect_url: string;
}

export interface KitIntegrationConfig {
	form_id?: string;
	field_mapping: Record<string, string>;
	default_tags: string[];
}

export interface MailchimpIntegrationConfig {
	list_id: string;
	double_optin: boolean;
	merge_field_mapping: Record<string, string>;
	default_tags: string[];
	status: string;
}

export interface Message {
	id: string;
	form_id: string;
	data: string;
	is_spam: boolean;
	spam_score: number;
	user_marked_spam: boolean;
	created_at: string;
	ip_hash: string;
	user_agent?: string;
	device_type?: string;
	browser_name?: string;
	form_view_id?: string;
	location?: LocationInfo;
}

export interface MessageCountByDay {
	date: string;
	message_count: number;
}

export interface MessageQueryParams {
	limit: number;
	offset: number;
	form_id?: string;
	is_spam?: boolean;
}

export interface MessagesResponse {
	data: Message[];
	files?: File[];
	total: number;
}

export interface NewForm {
	title: string;
	filter_spam?: boolean;
	check_challenge?: boolean;
	redirect_url?: string;
	user_id: string;
	auto_response_enabled?: boolean;
	auto_response_subject?: string;
	auto_response_text?: string;
}

export interface NewFormView {
	form_id: string;
	ip_hash: string;
	user_agent?: string;
	referrer?: string;
	view_type: string;
	device_type?: string;
	browser_name?: string;
	traffic_source?: string;
	location?: LocationInfo;
	analytics_data?: any;
}

export interface NewFormsIntegration {
	form_id: string;
	integration_id: string;
}

export interface NewFormsRecipient {
	form_id: string;
	verified_email_id: string;
}

export interface NewIntegration {
	user_id: string;
	title: string;
	kind: IntegrationType;
	data: string;
	secrets?: string;
}

export interface PipedriveIntegrationConfig {
	company_domain: string;
	create_person: boolean;
	create_lead: boolean;
	default_owner_id?: number;
	default_org_id?: number;
	custom_field_mapping: Record<string, string>;
	lead_title_template?: string;
}

export interface UpdateForm {
	title: string;
	filter_spam: boolean;
	check_challenge: boolean;
	check_specs: boolean;
	specs?: string;
	redirect_url?: string;
	auto_response_enabled: boolean;
	auto_response_subject?: string;
	auto_response_text?: string;
}

export interface UpdateIntegration {
	title: string;
	data?: string;
	secrets?: any;
}

export interface ViewCountByDay {
	date: string;
	view_count: number;
}

export interface ZapierIntegration {
	webhook_url: string;
}

