/* eslint-disable */
/**
 * This file was automatically generated by typeshare from Rust.
 * Do not edit this file manually.
 * 
 * To regenerate, run: pnpm generate-types
 */

/*
 Generated by typeshare 1.13.3
*/

export enum Currency {
	BTC = "btc",
	EUR = "eur",
	USDT = "usdt",
	DAI = "dai",
	USD = "usd",
	AED = "aed",
	ARS = "ars",
	AUD = "aud",
	BDT = "bdt",
	BGN = "bgn",
	BOB = "bob",
	BRL = "brl",
	CAD = "cad",
	CHF = "chf",
	CLP = "clp",
	CNY = "cny",
	COP = "cop",
	CRC = "crc",
	CZK = "czk",
	DKK = "dkk",
	DOP = "dop",
	EGP = "egp",
	FJD = "fjd",
	GBP = "gbp",
	HKD = "hkd",
	HRK = "hrk",
	HUF = "huf",
	IDR = "idr",
	ILS = "ils",
	INR = "inr",
	JPY = "jpy",
	KES = "kes",
	KRW = "krw",
	LKR = "lkr",
	MAD = "mad",
	MXN = "mxn",
	MYR = "myr",
	NGN = "ngn",
	NOK = "nok",
	NZD = "nzd",
	PEN = "pen",
	PHP = "php",
	PKR = "pkr",
	PLN = "pln",
	QAR = "qar",
	RON = "ron",
	RUB = "rub",
	SAR = "sar",
	SEK = "sek",
	SGD = "sgd",
	THB = "thb",
	TRY = "try",
	TWD = "twd",
	UAH = "uah",
	VND = "vnd",
	ZAR = "zar",
}

export interface AccountMovement {
	id: string;
	user_id: string;
	amount: number;
	currency: Currency;
	features: string;
	created_at: string;
	token_id?: string;
}

export interface AccountMovementsResponse {
	data: AccountMovement[];
	total: number;
}

export interface ApiKey {
	id: string;
	user_id: string;
	name: string;
	key_hash: string;
	scope?: any;
	is_active: boolean;
	created_at: string;
	updated_at: string;
	expires_at: string;
}

export interface ApiKeyCreateRequest {
	name: string;
	scope?: string[];
	expires_in_days: number;
}

export interface ApiKeyResponse {
	id: string;
	name: string;
	scope?: string[];
	is_active: boolean;
	created_at: string;
	expires_at: string;
	key?: string;
}

export interface ApiKeyUpdateRequest {
	name?: string;
	is_active?: boolean;
	scope?: string[];
}

export interface ApiKeyUsageResponse {
	total_spent: number;
	currency: Currency;
	transaction_count: number;
	first_used: string;
	last_used: string;
}

export interface CommonQueryParams {
	limit?: number;
	offset?: number;
}

export interface CustomerPortalResponse {
	portal_url: string;
}

export enum DepositStatus {
	PENDING = "PENDING",
	DONE = "DONE",
	ERROR = "ERROR",
}

export enum DepositProvider {
	STRIPE = "STRIPE",
	COINBASE = "COINBASE",
}

export interface Deposits {
	id: string;
	user_id: string;
	amount: number;
	currency: Currency;
	status: DepositStatus;
	account_movements_id?: string;
	data: string;
	created_at: string;
	updated_at: string;
	provider: DepositProvider;
}

export interface DepositsResponse {
	data: Deposits[];
	total: number;
}

export interface EmailVerificationRequest {
	id: string;
	email_id: string;
}

export interface FieldValidationError {
	field: string;
	code: string;
	message: string;
	params: any;
}

export interface FieldValidationErrorResponse {
	error: string;
	action?: string;
	message: string;
	errors: FieldValidationError[];
}

export interface GitHubLoginChallenge {
	auth_url: string;
	referral_code?: string;
}

export interface GitHubLoginChallengeResponse {
	code: string;
	state: string;
	scope?: string;
}

export interface GitHubLoginRequest {
	referral_code?: string;
}

export interface GoogleLoginChallenge {
	auth_url: string;
	referral_code?: string;
}

export interface GoogleLoginChallengeResponse {
	code: string;
	state: string;
	scope?: string;
	authuser?: string;
	prompt?: string;
}

export interface GoogleLoginRequest {
	referral_code?: string;
}

export interface HttpNewVerifiedEmail {
	email: string;
}

export interface HttpRetryVerifiedEmail {
	verified_email_id: string;
}

export interface LoginSuccess {
	user_id: string;
	access_token: string;
	refresh_token: string;
	expires_at: number;
}

export interface MagicLinkLoginChallenge {
	id: string;
	email: string;
	challenge: string;
	referral_code?: string;
}

export interface MagicLinkLoginChallengeResponse {
	id: string;
	challenge: string;
}

export interface MagicLinkLoginReqest {
	email: string;
	referral_code?: string;
}

export interface MicrosoftLoginChallenge {
	auth_url: string;
	referral_code?: string;
}

export interface MicrosoftLoginChallengeResponse {
	code: string;
	state: string;
	scope?: string;
	session_state?: string;
}

export interface MicrosoftLoginRequest {
	referral_code?: string;
}

export interface NewDepositCoinbaseResponse {
	deposit_id: string;
	charge_id: string;
	hosted_url: string;
}

export interface NewDepositHttp {
	/** Amount in cents (e.g., 1500 for 15.00 EUR, 1 for 0.01 EUR) */
	amount: number;
	currency: Currency;
	provider: DepositProvider;
}

export interface NewDepositStripeResponse {
	deposit_id: string;
	checkout_session_id: string;
}

export interface NewSubscriptionCheckoutResponse {
	checkout_session_id: string;
	redirect_url: string;
}

export interface NostrLoginChallenge {
	id: string;
	public_key: string;
	challenge: string;
	referral_code?: string;
}

export interface NostrLoginChallengeResponse {
	id: string;
	response: string;
}

export interface NostrLoginRequest {
	public_key: string;
	referral_code?: string;
}

export interface PlanAllowance {
	service: string;
	limit: number;
}

export interface ReferralCodeResponse {
	code: string;
	created_at: string;
}

export interface ReferralEarning {
	currency: Currency;
	amount: number;
}

export interface ReferralHistoryItem {
	created_at: string;
	first_payment_processed: boolean;
	bonus_amount?: number;
	bonus_currency?: Currency;
	bonus_date?: string;
}

export interface ReferralHistoryResponse {
	data: ReferralHistoryItem[];
	total: number;
}

export interface ReferralStatsResponse {
	total_referrals: number;
	successful_referrals: number;
	total_earnings: ReferralEarning[];
}

export interface RenewalRequest {
	access_token: string;
	refresh_token: string;
}

export interface SubscribeRequest {
	plan_id: string;
}

export interface SubscriptionPlanConfig {
	id: string;
	name: string;
	price: number;
	currency: Currency;
	is_free_plan: boolean;
	allowances: PlanAllowance[];
	features: string[];
	stripe_product_id?: string;
	stripe_price_id?: string;
}

export enum SubscriptionStatus {
	ACTIVE = "ACTIVE",
	GracePeriod = "GracePeriod",
	EXPIRED = "EXPIRED",
	CANCELLED = "CANCELLED",
}

export interface SubscriptionResponse {
	subscription_id: string;
	plan_name: string;
	plan_id: string;
	is_free_plan: boolean;
	status: SubscriptionStatus;
	current_period_start: string;
	current_period_end: string;
	next_plan_id?: string;
}

export interface UsageResponse {
	service: string;
	used: number;
	limit: number;
	remaining: number;
}

export interface VerifiedEmail {
	id: string;
	user_id: string;
	email: string;
	is_verified: boolean;
	last_requested_at: string;
	request_count: number;
	created_at: string;
	updated_at: string;
	is_account_email: boolean;
}

export interface VerifiedEmailsQueryParams {
	limit?: number;
	offset?: number;
	is_verified?: boolean;
}

export interface VerifiedEmailsResponse {
	data: VerifiedEmail[];
	total: number;
}

export interface VerifyEmailResponse {
	email_id: string;
	verify_email_token: string;
}

export type LoginChallenge = 
	| { type: "NOSTR", content: NostrLoginChallenge }
	| { type: "EMAIL_MAGIC_LINK", content: MagicLinkLoginChallenge }
	| { type: "GOOGLE", content: GoogleLoginChallenge }
	| { type: "GITHUB", content: GitHubLoginChallenge }
	| { type: "MICROSOFT", content: MicrosoftLoginChallenge };

export type LoginChallengeUserResponse = 
	| { type: "NOSTR", content: NostrLoginChallengeResponse }
	| { type: "EMAIL_MAGIC_LINK", content: MagicLinkLoginChallengeResponse }
	| { type: "GOOGLE", content: GoogleLoginChallengeResponse }
	| { type: "GITHUB", content: GitHubLoginChallengeResponse }
	| { type: "MICROSOFT", content: MicrosoftLoginChallengeResponse };

export type LoginRequest = 
	| { type: "NOSTR", content: NostrLoginRequest }
	| { type: "EMAIL_MAGIC_LINK", content: MagicLinkLoginReqest }
	| { type: "GOOGLE", content: GoogleLoginRequest }
	| { type: "GITHUB", content: GitHubLoginRequest }
	| { type: "MICROSOFT", content: MicrosoftLoginRequest };

export type NewDepositResponse = 
	| { type: "STRIPE", content: NewDepositStripeResponse }
	| { type: "COINBASE", content: NewDepositCoinbaseResponse };

export type NewSubscriptionResponse = 
	| { type: "Direct", content: SubscriptionResponse }
	| { type: "Checkout", content: NewSubscriptionCheckoutResponse };

